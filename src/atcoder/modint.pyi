from typing import Generic, Literal, TypeVar, Union

__m = TypeVar("__m")

class __static_modint(Generic[__m]):
    @classmethod
    def mod(cls) -> int: ...
    @classmethod
    def raw(cls) -> "__static_modint[__m]": ...
    def __init__(self, v: int = 0) -> None: ...
    def val(self) -> int: ...
    def __iadd__(self, rhs: Union[int, "__static_modint[__m]"]) -> "__static_modint[__m]": ...
    def __isub__(self, rhs: Union[int, "__static_modint[__m]"]) -> "__static_modint[__m]": ...
    def __imul__(self, rhs: Union[int, "__static_modint[__m]"]) -> "__static_modint[__m]": ...
    def __itruediv__(self, rhs: Union[int, "__static_modint[__m]"]) -> "__static_modint[__m]": ...
    def __pos__(self) -> "__static_modint[__m]": ...
    def __neg__(self) -> "__static_modint[__m]": ...
    def pow(self, n: int) -> "__static_modint[__m]": ...
    def inv(self) -> "__static_modint[__m]": ...
    def __add__(self, rhs: Union[int, "__static_modint[__m]"]) -> "__static_modint[__m]": ...
    def __radd__(self, rhs: int) -> "__static_modint[__m]": ...
    def __sub__(self, rhs: Union[int, "__static_modint[__m]"]) -> "__static_modint[__m]": ...
    def __rsub__(self, rhs: int) -> "__static_modint[__m]": ...
    def __mul__(self, rhs: Union[int, "__static_modint[__m]"]) -> "__static_modint[__m]": ...
    def __rmul__(self, rhs: int) -> "__static_modint[__m]": ...
    def __eq__(self, rhs: object) -> bool: ...
    def __ne__(self, rhs: object) -> bool: ...

modint998244353 = __static_modint[Literal[998244353]]
modint1000000007 = __static_modint[Literal[1000000007]]

__id = TypeVar("__id")

class __dynamic_modint(Generic[__id]):
    @classmethod
    def mod(cls) -> int: ...
    @classmethod
    def set_mod(cls, m: int) -> None: ...
    @classmethod
    def raw(cls) -> "__dynamic_modint[__id]": ...
    def __init__(self, v: int = 0) -> None: ...
    def val(self) -> int: ...
    def __iadd__(self, rhs: Union[int, "__dynamic_modint[__id]"]) -> "__dynamic_modint[__id]": ...
    def __isub__(self, rhs: Union[int, "__dynamic_modint[__id]"]) -> "__dynamic_modint[__id]": ...
    def __imul__(self, rhs: Union[int, "__dynamic_modint[__id]"]) -> "__dynamic_modint[__id]": ...
    def __itruediv__(self, rhs: Union[int, "__dynamic_modint[__id]"]) -> "__dynamic_modint[__id]": ...
    def __pos__(self) -> "__dynamic_modint[__id]": ...
    def __neg__(self) -> "__dynamic_modint[__id]": ...
    def pow(self, n: int) -> "__dynamic_modint[__id]": ...
    def inv(self) -> "__dynamic_modint[__id]": ...
    def __add__(self, rhs: Union[int, "__dynamic_modint[__id]"]) -> "__dynamic_modint[__id]": ...
    def __radd__(self, rhs: int) -> "__dynamic_modint[__id]": ...
    def __sub__(self, rhs: Union[int, "__dynamic_modint[__id]"]) -> "__dynamic_modint[__id]": ...
    def __rsub__(self, rhs: int) -> "__dynamic_modint[__id]": ...
    def __mul__(self, rhs: Union[int, "__dynamic_modint[__id]"]) -> "__dynamic_modint[__id]": ...
    def __rmul__(self, rhs: int) -> "__dynamic_modint[__id]": ...
    def __eq__(self, rhs: object) -> bool: ...
    def __ne__(self, rhs: object) -> bool: ...

modint = __dynamic_modint[Literal[-1]]
modint0 = __dynamic_modint[Literal[0]]
modint1 = __dynamic_modint[Literal[1]]
modint2 = __dynamic_modint[Literal[2]]
modint3 = __dynamic_modint[Literal[3]]
modint4 = __dynamic_modint[Literal[4]]
modint5 = __dynamic_modint[Literal[5]]
modint6 = __dynamic_modint[Literal[6]]
modint7 = __dynamic_modint[Literal[7]]
